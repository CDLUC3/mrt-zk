package org.cdlib.mrt.zk;

import java.nio.file.Paths;
import java.util.List;

import org.apache.zookeeper.KeeperException;
import org.apache.zookeeper.ZooKeeper;
import org.json.JSONObject;

/**
 * Class to manage a Merritt Access Assembly Request.
 * @see <a href="https://github.com/CDLUC3/mrt-zk/blob/main/design/transition.md">State Transition Design</a>
 */
public class Access extends QueueItem {
  public static final String DIR = "/access";
  public static final String PREFIX = "qid";
  private String queueName;

  /**
   * @param id Unique id assigned to an assembly request.  This id is generated by creating a sequential queue item.
   */
  public Access(String queueName, String id) {
    super(id);
    this.queueName = queueName;
  }

  /**
   * @param id Unique id assigned to an assembly request.  This id is generated by creating a sequential item.
   * @param data JSON representation of an ingest initiated by a Merritt depostor.
   */
  public Access(String queueName, String id, JSONObject data) {
    super(id, data);
    this.queueName = queueName;
  }

  public static String dir(String queueName) {
    return Paths.get(Access.DIR, queueName).toString();
  }

  public String dir() {
    return Access.dir(queueName);
  }
  public String prefix() {
    return Access.PREFIX;
  }
  public static String prefixPath(String queueName) {
    return String.format("%s/%s", Access.dir(queueName), Access.PREFIX);
  };
  public static IngestState initStatus() {
    return AccessState.Pending;
  }

  public IngestState resolveStatus(String s){
    return AccessState.valueOf(s);
  }

  @Override
  public void loadProperties(ZooKeeper client) throws KeeperException, InterruptedException, MerrittZKNodeInvalid {
    data = optJsonProperty(client, ZKKey.ACCESS_TOKEN);
  }

  public IngestState[] states() {
    return AccessState.values();
  }

  public static Access createAssembly(ZooKeeper client, String queueName, JSONObject token) throws KeeperException, InterruptedException, MerrittZKNodeInvalid {
    String id = QueueItemHelper.createId(client, Access.prefixPath(queueName));
    Access access = new Access(queueName, id, token);
    access.createData(client, ZKKey.ACCESS_TOKEN, token);
    access.setStatus(client, Access.initStatus()); 
    return access;
  }

  public void delete(ZooKeeper client) throws MerrittStateError, MerrittZKNodeInvalid, KeeperException, InterruptedException {
    if (!this.status().isDeletable()) {
      throw new MerrittStateError(String.format("Delete invalid for %s", path()));
    }
    QueueItemHelper.deleteAll(client, path());
  }

  public static Access acquirePendingAssembly(ZooKeeper client, String queueName) throws MerrittZKNodeInvalid, KeeperException, InterruptedException {
    List<String> assemblies = client.getChildren(Access.dir(queueName), false);
    assemblies.sort(String::compareTo);
    for(String cp: assemblies) {
      Access a = new Access(queueName, cp);
      if (a.lock(client)) {
        a.load(client);
        return a;
      }
    }  
    return null;
  }
}
